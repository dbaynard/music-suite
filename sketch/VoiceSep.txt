
## Voice separation

    sep :: Score a -> [Aligned (Voice (Maybe a))]

such that

    sep (renderAlignedVoice xs) == xs

----

Can also be described as

    schedule :: Ord a => Score a -> [Score a]

such that all resulting scores have no overlapping intervals as per hasOverlappingEvents

Reason for Ord, see below

----

This is the Interval Partitioning Problem
  https://en.wikipedia.org/wiki/Interval_scheduling
  https://www.cs.umd.edu/class/fall2009/cmsc451/lectures/Lec04-interval.pdf
    also
  https://en.wikipedia.org/wiki/Interval_tree
  
- We're looking for the smallest number of compatible subsets of a span/interval set
    - We want to take voice-leading into account, for example in
      
      fg a
      e-d

    - We generally want to avoid the separation

      fgd

      e-a




- ALT Brute-force with countour weighting
  PRO/CONS: Good results for all input. Very slow.  
  - Generate *all* partitions
  - Exclude those whose subsets has overlaps
  - For those that remain, generate the *melodic countour* and choose the best partition, preferring:
    - INVERTED Melodic counters that *overlap*
    - Flat melodic countours
    - Linear melodic contours

- ALT Greedy Alg for Interval Partitioning:
  PRO/CONS: 
  
    Let {1, . . . , d} be a set of labels (=voices), where d = depth
      Sort intervals by start time
      For j = 1,2,3,...,n
        Let Q = set of labels that havenâ€™t been assigned to a preceding interval that overlaps Ij
        If Q is not empty,
          Pick any label from Q and assign it to Ij
        Else
          Leave Ij unlabeled
      Endfor

  This could work if the step where a label is choosen "any label" is done with backtracking!

type Label = Int
-- Annotate values in score with a label, so that all oveerlapping notes have distinct labels.
partitionSpans :: (Label -> a -> b) -> Score a -> Choose (Score b)
partitionSpans f s = 

-- We can do this with a (StateT s (ListT a)), where the state is (Map Label Time), i.e. last possible offset for each label
-- Or simply using foldl!
partitionSpans' :: Score a -> Choose (Score (Label, b))
partitionSpans' s = 


- ALT Graph coloring (for 3 voices max!)
  


-----

TODO use to write a new experimental, simplified backend structure (to standard notation) that can also handle piano notation
I.e.
  Score Aspects -> StandardNotation
where

    data AnnTree u a = Branch u [AnnTree u a] | Leaf a

    newtype StandardNotation = Work
    type WorkInfo     = Title, Annotations, Attribution
    type MovementInfo = Title, Annotations, Attribution 
    type Work         = (WorkInfo, [Movement])
    type StaffInfo    = (InstrumentShortName, InstrumentFullName, Transposition, SibeliusFriendlyName, SmallOrLarge, ScoreOrder)
    data BracketType  = Bracket | Brace | Subbracket
    type Movement     = MovementInfo, GlobalStaff, AnnTree BracketType Staff
    type GlobalStaff  = [BarNumber?,TimeSignature?,KeySignature?,RehearsalMark?,TempoMark,SpecialBarline?]
    type Staff        = StaffInfo,[Bar]
    type UpDown       = Up | Down
    data CrossStaff   = NoCrossStaff | NextNoteCrossStaff UpDown | PreviousNoteCrossStaff UpDown
    data ArpeggioNotation   = TODO
    data CrossBeamNotation  = TODO
    data BreathNotation = Fermata | PauseAfter | CaesuraAfter
    type Bar          = [Voice ([Pitch], ArpeggioNotation, CrossBeamNotation, BreathNotation, ArticulationNotation, CrossStaff)], Voice DynamicNotation
  
  
  
  
  
  
  
  
  
  